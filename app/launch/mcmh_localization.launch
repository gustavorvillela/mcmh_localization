<launch>
  <!-- Configuração do modelo do TurtleBot3 
  <arg name="model" default="waffle_pi"/>
  <env name="TURTLEBOT3_MODEL" value="$(arg model)"/>-->

  <!-- World -->
  <arg name="world" default="world"/>

  <!-- Gazebo com mapa e TurtleBot -->
  <include file="$(find turtlebot3_gazebo)/launch/turtlebot3_$(arg world).launch" />
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch" />

  <!-- Teleoperação do TurtleBot-->
  <include file="$(find turtlebot3_teleop)/launch/turtlebot3_teleop_key.launch" />

  <!-- Carregar mapa -->
  <arg name="map_file" default="$(find mcmh_localization)/maps/map_$(arg world).yaml"/>
  <node pkg="map_server" type="map_server" name="map_server" args="$(arg map_file)" />

  <!-- Carrega o arquivo YAML -->
  <rosparam file="$(find mcmh_localization)/params/amhmcl.yaml" command="load" />

  <!-- Publisher contínuo de pose inicial -->
  <node name="continuous_initial_pose_publisher" pkg="mcmh_localization" type="initial_pose_pub.py" output="screen">
    <param name="x" value="-2.0"/>
    <param name="y" value="-0.5"/>
    <param name="yaw" value="0.0"/>
    <param name="publish_rate" value="1.0"/>
    <rosparam param="covariance">
      [0.25, 0.0, 0.0, 0.0, 0.0, 0.0,
       0.0, 0.25, 0.0, 0.0, 0.0, 0.0,
       0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
       0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
       0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
       0.0, 0.0, 0.0, 0.0, 0.0, 0.1]
    </rosparam>
  </node>
        
        
  <!-- Nó do estimador baseado em MCMC-->
  <node name="mcmh_localizer" pkg="mcmh_localization" type="amcmh_localizer.py" output="screen" /> 

  <!-- Nó para broadcast da pose estimada-->
  <node name="pose_broadcaster" pkg="mcmh_localization" type="pose_broadcaster.py" output="screen" />  

  <!-- RViz com visualização do mapa, robot e partículas -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find mcmh_localization)/rviz/mcmh_view.rviz" />
</launch>